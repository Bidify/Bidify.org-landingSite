version: '3.8'

services:
  web:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: bidify-web
    restart: unless-stopped
    labels:
      # Enable Traefik
      - traefik.enable=true
      
      # HTTPS router (apex)
      - traefik.http.routers.bidify.rule=Host(`bidify.me`)
      - traefik.http.routers.bidify.entrypoints=websecure
      - traefik.http.routers.bidify.tls.certresolver=letsencrypt
      
      # HTTP → HTTPS (apex + www)
      - traefik.http.routers.bidify-http.rule=Host(`bidify.me`,`www.bidify.me`)
      - traefik.http.routers.bidify-http.entrypoints=web
      - traefik.http.routers.bidify-http.middlewares=redirect-https
      
      # www → apex (permanent)
      - traefik.http.routers.bidify-www.rule=Host(`www.bidify.me`)
      - traefik.http.routers.bidify-www.entrypoints=websecure
      - traefik.http.routers.bidify-www.tls.certresolver=letsencrypt
      - traefik.http.routers.bidify-www.middlewares=to-apex
      
      # Middlewares
      - traefik.http.middlewares.redirect-https.redirectscheme.scheme=https
      - traefik.http.middlewares.redirect-https.redirectscheme.permanent=true
      - traefik.http.middlewares.to-apex.redirectregex.regex=^https?://www\\.bidify\\.me/(.*)
      - traefik.http.middlewares.to-apex.redirectregex.replacement=https://bidify.me/$$1
      - traefik.http.middlewares.to-apex.redirectregex.permanent=true
      
      # Service configuration
      - traefik.http.services.bidify.loadbalancer.server.port=80
      - traefik.http.services.bidify.loadbalancer.healthcheck.path=/health
      - traefik.http.services.bidify.loadbalancer.healthcheck.interval=30s
      - traefik.http.services.bidify.loadbalancer.healthcheck.timeout=10s
      - traefik.http.services.bidify.loadbalancer.healthcheck.retries=3
      
      # Access logs
      - traefik.http.routers.bidify.middlewares=access-logs
      - traefik.http.middlewares.access-logs.plugin.Prometheus[traefik_entrypoint_name]
      
    networks:
      - web
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    # Resource limits (optional - adjust based on server capacity)
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.125'

networks:
  web:
    external: true